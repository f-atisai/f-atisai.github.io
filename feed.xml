<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2023-11-29T09:24:04+00:00</updated><id>/feed.xml</id><title type="html">F.O. Atisai</title><entry><title type="html">Install POSROG V3U8 (PhoenixOS) alongside Solus</title><link href="/2022/12/21/posrog-install.html" rel="alternate" type="text/html" title="Install POSROG V3U8 (PhoenixOS) alongside Solus" /><published>2022-12-21T00:00:00+00:00</published><updated>2022-12-21T00:00:00+00:00</updated><id>/2022/12/21/posrog-install</id><content type="html" xml:base="/2022/12/21/posrog-install.html"><![CDATA[<p>POSROG, or PhoenixOS for the Republic of Gamers, is an Android operating system with x86 architecture that has been modified from AOSP. It is a lightweight emulator that focuses on device support, performance, and boosting for gaming applications.</p>

<p>On my low-end AMD e2-9000, I’ve chosen to dualboot POSROG and Solus. This is a relatively simple procedure, however, it is distinct because Solus employs the systemd bootloader, whereas posrog installations uses grub.</p>

<p>Here, I reflect on the steps taken to complete this setup.</p>

<h3 id="creating-the-posrog-partition">Creating The POSROG Partition</h3>

<ul>
  <li>Boot into Solus and create an EXT4 partition using Gparted.
    <blockquote>
      <p>Label: ANDROID.<br />
Size: 40GB.</p>
    </blockquote>
  </li>
</ul>

<p>Nb: Copy the UUID of the partition and save it. (To be used later).</p>

<ul>
  <li>
    <p>Mount ANDROID and create directory structure:
<code class="language-plaintext highlighter-rouge">/posrog/data/</code></p>
  </li>
  <li>
    <p>Download Official <a href="https://posrog.com.id/download">POSROG V3U8 </a> (choose Kernel and architecture chosen to match host machine). Extract the downloaded file.</p>
  </li>
  <li>
    <p>Locate the ISO and extract it.</p>
  </li>
  <li>
    <p>Copy the following files into posrog directory of ANDROID partition.</p>
    <ul>
      <li>posrog,</li>
      <li>ramdisk.img,</li>
      <li>system.img,</li>
    </ul>
  </li>
</ul>

<p>Nb: Leave data directory empty. It will be used to create the android data files by POSROG during installation.</p>

<h3 id="adding-systemd-bootloader-entry-for-posrog">Adding Systemd Bootloader Entry for POSROG</h3>

<p>And now comes the fun part…</p>

<p>Since Solus unmounts the boot partition after booting, it will have to be mounted to edit the systemd configuration files.</p>

<p>Launch a new terminal window and perform the following sequence of operations:</p>

<ul>
  <li>
    <p>Mount the EFI System partition which contains the bootloader to <code class="language-plaintext highlighter-rouge">/boot</code>.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo mount /dev/sdX# /boot
</code></pre></div>    </div>

    <p>Where sdX# is the EFI System Partition (ESP).</p>
  </li>
  <li>
    <p>Change directory to <code class="language-plaintext highlighter-rouge">/boot/EFI/</code> and create subdirectory <code class="language-plaintext highlighter-rouge">posrog</code>. Copy <code class="language-plaintext highlighter-rouge">initrd.img</code> and the kernel files from the iso to this folder.</p>
  </li>
</ul>

<ol>
  <li>
    <p>Change directory to <code class="language-plaintext highlighter-rouge">/boot/entries/</code> and add a new file <code class="language-plaintext highlighter-rouge">posrog.current.conf</code> to create configuration file for posrog.</p>
  </li>
  <li>
    <p>Open the file in nano as su and add the following lines:</p>
  </li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>title POSROG V3U8 - Android x86
linux /EFI/posrog/kernelxx
initrd/EFI/posrog/initrd.img
options root=PARTUUID=THE_UUID_WE_COPIED_BEFORE rw quiet androidboot.selinux=permissive buildvariant=userdebug acpi_sleep=s3_bios,s3_mode SRC=posrog/
search set=root file /posrog/system.img
</code></pre></div></div>

<p>Nb: <code class="language-plaintext highlighter-rouge">kernelxx</code> is the kernel file to load. POSROG comes with multiple kernels. Try all to see which gives best performance.</p>

<ul>
  <li>Save and exit nano. Navigate back to root directory.</li>
  <li>Unmount the ESP using
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo umount -R /boot
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="displaying-the-solus-boot-menu-by-default-on-boot">Displaying the Solus boot menu by default on boot</h3>

<p>The following command will set the timeout of the boot loader so that it appears by default.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo clr-boot-manager set-timeout 5 &amp;&amp; sudo clr-boot-manager update
</code></pre></div></div>

<h3 id="installing-posrog">Installing POSROG</h3>

<p>Alas… showtime.</p>

<p>Restart pc and select POSROG option from <strong>systemd menu</strong>. Wait for it to boot and follow the prompt to configure POSROG.
When android boots, select Install. (Complete installation without WiFi).</p>]]></content><author><name></name></author><summary type="html"><![CDATA[POSROG, or PhoenixOS for the Republic of Gamers, is an Android operating system with x86 architecture that has been modified from AOSP. It is a lightweight emulator that focuses on device support, performance, and boosting for gaming applications.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/install-posrog-banner.jpg" /><media:content medium="image" url="/install-posrog-banner.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>